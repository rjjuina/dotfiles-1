;; global variables
(setq
   inhibit-startup-screen t
    create-lockfiles nil
     make-backup-files nil
      column-number-mode t
       scroll-error-top-bottom t
        show-paren-delay 0.5
         use-package-always-ensure t
          sentence-end-double-space nil)

;; buffer local variables
(setq-default
   indent-tabs-mode nil
    tab-width 4
     c-basic-offset 4)

;; modes
(electric-indent-mode 0)

;; global keybindings
(global-unset-key (kbd "C-z"))

;; the package manager
(require 'package)
(setq
   package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                                          ("org" . "http://orgmode.org/elpa/")
                                                              ("melpa" . "http://melpa.org/packages/")
                                                                                  ("melpa-stable" . "http://stable.melpa.org/packages/"))
    package-archive-priorities '(("melpa-stable" . 1)))

(package-initialize)
(when (not package-archive-contents)
    (package-refresh-contents)
      (package-install 'use-package))
(require 'use-package)
(use-package ensime
               :ensure t
                 :pin melpa-stable)
(add-to-list 'exec-path "/usr/local/bin")
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (org evil use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(use-package scala-mode
               :interpreter
                 ("scala" . scala-mode))
(use-package sbt-mode
               :commands sbt-start sbt-command
                 :config
                   ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
                     ;; allows using SPACE when in the minibuffer
                       (substitute-key-definition
                            'minibuffer-complete-word
                               'self-insert-command
                                  minibuffer-local-completion-map))
(require 'evil)
;(evil-mode 1)
(global-font-lock-mode 1)

 (add-to-list 'load-path "PATH_TO_WHERE_YOU_UNPACKED_ORGMODE")
 (require 'org)
 (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
 (define-key global-map "\C-cl" 'org-store-link)
 (define-key global-map "\C-ca" 'org-agenda)
 (setq org-log-done t)
(setq org-agenda-files (list "~/org/work.org"
                                                          "~/org/school.org"
                                                                                       "~/org/home.org"))
