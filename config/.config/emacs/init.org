#+TITLE: LiteratEmacs
#+AUTHOR: XIONGCHENYU
#+EMAIL: xiongchenyu6 at gmail.com
#+DATE: <2022-01-31 Mon>
#+CREATED: <2022-01-31 Mon>
#+STARTUP: fold hidestars indent
#+PROPERTY: header-args :results silent :tangle "init.el"

* My Configuration
** Package Mangager
Straight is a very good package manager for me to easily get emacs third party pkgs from elpm and github.
#+begin_src emacs-lisp
(defvar straight-keymap
  (let ((keymap (make-keymap)))
    (define-key keymap "c" 'straight-check-package)
    (define-key keymap "C" 'straight-check-all)
    (define-key keymap "p" 'straight-pull-package) ;
    (define-key keymap "P" 'straight-pull-all)
    (define-key keymap "b" 'straight-rebuild-package)
    (define-key keymap "B" 'straight-rebuild-all)
    keymap))
#+end_src
** UI
*** Font

#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "JetBrains Mono-16"))

(straight-use-package
 '(ligature :type git :host github :repo "mickeynp/ligature.el"))

#+end_src
*** Ligature
#+begin_src emacs-lisp
(require 'ligature)

(ligature-set-ligatures 't '("www"))
;; Enable traditional ligature support in eww-mode, if the
;; `variable-pitch' face supports it
(ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
;; Enable all Cascadia Code ligatures in programming modes
(ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                     ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                     "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                     "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                     "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                     "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                     "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                     "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                     ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                     "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                     "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                     "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                     "\\\\" "://" "=?"))
(global-ligature-mode t)
(add-hook 'prog-mode-hook
          (lambda ()
            (setq-local prettify-symbols-alist
                        '(
                          ;; Functional
                          ("def" . "∆í")
                          ("composition" . "‚àò")
                          ("map" . "‚Ü¶")
                          ("lambda" . "Œª")
                          ;; Types
                          ("null" . "‚àÖ")
                          ("true" . "ùïã")
                          ("false" . "ùîΩ")
                          ("int" . "‚Ñ§")
                          ("float" . "‚Ñù")
                          ("str" . "ùïä")
                          ("bool" . "ùîπ")
                          ("list" . "ùïÉ")
                          ;; Flow
                          ))
            ))
#+end_src
*** Transparent
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(85 100))

(add-to-list 'default-frame-alist '(alpha 85 100))
#+end_src

** General
*** Native Setup
#+begin_src emacs-lisp
;; ** ÂêØÂä®Êó∂ÈªòËÆ§ÊâìÂºÄÁöÑ buffer.
(setq inhibit-startup-screen t)
(setq initial-buffer-choice nil)
(setq initial-major-mode 'emacs-lisp-mode)
(setq initial-scratch-message "")

;; ** yes-or-no-p
(defalias 'yes-or-no-p 'y-or-n-p)

;; ** ‰ΩøÁî®Á©∫Ê†ºÁº©Ëøõ
(setq-default indent-tabs-mode nil)

;; ** ÂÖ≥Èó≠ beep
(setq visible-bell t)

;; ** ‰∏ç‰ΩøÁî® dialog
(setq use-dialog-box nil)

(blink-cursor-mode 0)

(tool-bar-mode -1)
(menu-bar-mode 0)

;; ** ÂÖ≥Èó≠ scroll-bar
(scroll-bar-mode -1)

;; ** Â§ÑÁêÜÈïøË°å
(global-so-long-mode 1)

;; ** Â§ÑÁêÜÊäòË°å
(toggle-word-wrap 1)
(setq word-wrap-by-category t)

;; ** save history
(require 'savehist)
(savehist-mode 1)

(add-hook 'prog-mode-hook 'electric-pair-local-mode)
(add-hook 'conf-mode-hook 'electric-pair-local-mode)

(setq custom-file "~/.config/emacs/custom.el")

(setq electric-pair-pairs '((8216 . 8217) (8220 . 8221)))

;; (with-eval-after-load 'elec-pair
;;   (setq electric-pair-inhibit-predicate (lambda (c) (message c) (char-equal c ?\")))
;;   )
(straight-use-package 'rainbow-delimiters)

(require 'rainbow-delimiters)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

(add-hook 'conf-mode-hook #'rainbow-delimiters-mode)

(setq compilation-read-command nil)

(setq-default

 ;; browse-url-secondary-browser-function 'xwidget-webkit-browse-url

 ;; browse-url-browser-function 'xwidget-webkit-browse-url
 ;; Don't create lockfiles
 create-lockfiles nil

 ;; prefer UTF8
 buffer-file-coding-system 'utf-8-unix
 default-file-name-coding-system 'utf-8-unix
 default-keyboard-coding-system 'utf-8-unix

 default-process-coding-system '(utf-8-unix . utf-8-unix)
 default-sendmail-coding-system 'utf-8-unix
 default-terminal-coding-system 'utf-8-unix

; ;; Add newline at bottom of file
 require-final-newline t


 ;; Backup setups
 ;; We use temporary directory /tmp for backup files
 ;; More versions should be saved
 backup-directory-alist `((".*" . ,temporary-file-directory))
 auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
 backup-by-copying t
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t
 ;; Skip prompt for xref find definition
 xref-prompt-for-identifier nil

 ;; Don't wait for keystrokes display
 echo-keystrokes 0.01

 ;; Disable margin for overline and underline
 overline-margin 0
 underline-minimum-offset 0

 ;; Allow resizing frame by pixels
 frame-resize-pixelwise t

 ;; Better scroll behavior
 mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
 mouse-wheel-progressive-speed nil

 ;; Disable copy region blink
 copy-region-blink-delay 0

 ;; Use short answer when asking yes or no
 read-answer-short t

 ;; Always follow link
 vc-follow-symlinks t

 ;; Disable ring bell
 ring-bell-function 'ignore

 ;; Mouse yank at current point
 mouse-yank-at-point t

 ;; DWIM target for dired
 ;; Automatically use another dired buffer as target for copy/rename
 dired-dwim-target t)

(global-hl-line-mode t)

(straight-use-package 'which-key)

(require 'which-key)

(which-key-mode)

(setq read-process-output-max (* 1024 1024)) ;; 1mb

(windmove-default-keybindings)
#+end_src
*** Native comp
#+begin_src emacs-lisp
(setq native-comp-always-compile t)
#+end_src
*** Native Global Mode
#+begin_src emacs-lisp
(auto-save-visited-mode +1)

(global-auto-composition-mode +1)
(global-auto-revert-mode +1)
(global-eldoc-mode +1)
;; (global-linum-mode +1)
(global-visual-line-mode +1)
;; (global-word-wrap-whitespace-mode +1)
(auto-fill-mode +1)
(save-place-mode +1)

(setq-default abbrev-mode t)
(winner-mode +1)
(global-tab-line-mode)
(global-prettify-symbols-mode)

(next-error-follow-minor-mode 1)
(pixel-scroll-precision-mode t)
#+end_src
*** Buffer
#+begin_src emacs-lisp
(setq kill-buffer-query-functions nil)
#+end_src
*** Auto Save
#+begin_src emacs-lisp
(setq auto-save-visited-interval 0.1)
#+end_src
*** Indentation
#+begin_src emacs-lisp
(setq editorconfig-mode t)
#+end_src

** Structure Editing
*** Meow
#+begin_src emacs-lisp
(straight-use-package 'meow)
(require 'meow)
(setq meow-esc-delay 0.001)
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("<escape>" . ignore))

  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)

   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("o" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("x" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)

   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("O" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)


   '("I" . meow-block)
   '("A" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)

   '("u" . meow-undo)

   '("U" . meow-undo-in-selection)
   '("/" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("d" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

(meow-setup)

(unless (bound-and-true-p meow-global-mode)
  (meow-setup-indicator)
  (meow-global-mode 1))

(with-eval-after-load "meow"
  (add-to-list 'meow-expand-exclude-mode-list 'wdired-mode))

(setq meow-use-clipboard t)
#+end_src
*** Lispy
#+begin_src emacs-lisp

(straight-use-package 'lispy)

(require 'lispy)

(add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'clojure-mode-hook (lambda () (lispy-mode 1)))
(add-hook 'racket-mode-hook (lambda () (lispy-mode 1)))

#+end_src
** Irc
#+begin_src emacs-lisp
(defun my-fetch-password (&rest params)
  (require 'auth-source)
  (let ((match (car (apply #'auth-source-search params))))
    (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
              (funcall secret)
            secret))
      (error "Password not found for %S" params))))

(defun my-nickserv-password ()
  (my-fetch-password :user "freemanX" :host "irc.libera.chat")
  )

(require 'erc-join)
(erc-autojoin-mode 1)

(defun erc-myself ()
  (interactive)
  (setq erc-autojoin-channels-alist '((".*" "#emacs" "#haskell" "#clojure" "#scala")))
  (erc-tls :server "irc.libera.chat" :port 6697 :nick  "freemanX" :password (my-nickserv-password))
  )

#+end_src
** Coding
*** Better terminal
#+begin_src emacs-lisp
(straight-use-package 'vterm)
(require 'vterm)
(setq vterm-kill-buffer-on-exit t)

#+end_src
*** Better Search
#+begin_src emacs-lisp
(straight-use-package 'rg)

(autoload 'rg-project "wgrep" nil t)
(autoload 'rg-project "rg" nil t)

(with-eval-after-load "wgrep"
  (define-key wgrep-mode-map (kbd "C-c C-c") #'wgrep-finish-edit))

(define-key project-prefix-map "r" 'rg-project)

#+end_src
*** Auto complete
#+begin_src emacs-lisp

(straight-use-package 'company)
(add-hook 'prog-mode-hook 'company-mode)
(add-hook 'conf-mode-hook 'company-mode)

(autoload 'company-mode "company" nil t)

(straight-use-package 'company-box)

(require 'company-box)

(add-hook 'company-mode-hook 'company-box-mode)

(setq company-tooltip-align-annotations t)
(straight-use-package 'yasnippet)

(yas-global-mode 1)

(straight-use-package
 '(copilot :type git :host github :repo "zerolfx/copilot.el" :files ("dist" "*.el")))

(require 'copilot)

(setq copilot-node-executable "/nix/store/6cdccplrjwga5rd3b2s7xb8zd25hnsix-nodejs-16.17.0/bin/node")

(defun my-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (yas-expand)
      (company-indent-or-complete-common nil)))
;; (setq copilot--completion-timer 0.5)
                                        ; modify company-mode behaviors
(with-eval-after-load 'company
  ;; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)
  (define-key company-mode-map (kbd "<tab>") 'my-tab)
  (define-key company-mode-map (kbd "TAB") 'my-tab)
  (define-key company-active-map (kbd "<tab>") 'my-tab)
  (define-key company-active-map (kbd "TAB") 'my-tab))

(add-hook 'prog-mode-hook 'copilot-mode)
#+end_src
*** Fold
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
(add-hook 'hs-minor-mode-hook (lambda () (hs-hide-initial-comment-block)))

#+end_src
*** Motivation
#+begin_src emacs-lisp
(straight-use-package 'wakatime-mode)
(require 'wakatime-mode)
(global-wakatime-mode +1)
(setq wakatime-api-key "06fb08d0-68a4-4b39-bbb0-d34d325dc046")
#+end_src
*** Navigation
#+begin_src emacs-lisp
  (defun toggle-selective-display (column)
      (interactive "P")
      (set-selective-display
       (or column
           (unless selective-display
             (1+ (current-column))))))

    (defun toggle-hiding (column)
      (interactive "P")
      (if hs-minor-mode
          (if (condition-case nil
                  (hs-toggle-hiding)
                (error t))
              (hs-show-all))
        (toggle-selective-display column)))

    (defun display-code-line-counts (ov)
      (when (eq 'code (overlay-get ov 'hs))
        (overlay-put ov 'help-echo
                     (buffer-substring (overlay-start ov)
 		                      (overlay-end ov)))))
 
    (setq hs-set-up-overlay 'display-code-line-counts)
#+end_src
*** Git
#+begin_src emacs-lisp
(straight-use-package 'magit)
(autoload 'magit "magit" nil t)
#+end_src
*** Better minibuffer
#+begin_src emacs-lisp
(fido-mode)
(fido-vertical-mode)
(straight-use-package 'marginalia)

(straight-use-package
 '(marginalia :type git :host github :repo "minad/marginalia"))

(require 'marginalia)

(marginalia-mode)
(straight-use-package 'orderless)

(require 'orderless)

;; Âú®ËÆæÁΩÆcompletion-styles‰πãÂâçÔºå‰øùÂ≠òEmacsÈªòËÆ§ÁöÑcompletion-styles
(defvar osfva/default-completion-styles completion-styles)
(setq completion-styles '(orderless))

;; Ê≠§Â§ÑÈÖçÁΩÆÁúÅÁï•...

(with-eval-after-load 'company
  (defun osfva/company-disable-orderless (orig-fun &rest args)
    "Diable orderless completion style when company is doing the completion."
    (let ((completion-styles osfva/default-completion-styles))
      (apply orig-fun args)))
  (advice-add #'company--perform :around #'osfva/company-disable-orderless))

;; Ê≠§Â§ÑÈÖçÁΩÆÁúÅÁï•...
#+end_src
*** Better recent file
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-auto-cleanup 'never)
(setq recentf-max-saved-items 99)
(setq recentf-max-menu-items 99)
(setq recentf-show-file-shortcuts-flag nil)
(setq recentf-exclude
      '("COMMIT" "autoloads" "archive-contents" "eld" ".newsrc"
        ".recentf" "emacs-font-size.conf" "eh-scratch"
        "pyim-dcache-.*"))
;; Ëá™Âä®‰øùÂ≠òrecentfÊñá‰ª∂„ÄÇ
(add-hook 'find-file-hook #'recentf-save-list)

(defun recentf-filtered-list (arg)
  "Return a filtered list of ARG recentf items."
    (recentf-apply-menu-filter
     recentf-menu-filter
     (mapcar 'recentf-make-default-menu-element
	     (butlast recentf-list (- (length recentf-list) arg)))))

(defun recentf-list-submenus (arg)
  "Return a list of the recentf submenu names."
  (if (listp (cdar (recentf-filtered-list arg))) ; submenues exist
      (delq nil (mapcar 'car (recentf-filtered-list arg)))))

(defmacro recentf-list-entries (fn arg)
  "Return a list of ARG recentf menu entries as determined by FN.
When FN is `'car' return the menu entry names, when FN is `'cdr'
return the absolute file names."
  `(mapcar (lambda (x) (mapcar ,fn x))
	   (if (recentf-list-submenus ,arg)
	       (mapcar 'cdr (recentf-filtered-list ,arg))
	     (list (recentf-filtered-list ,arg)))))

;; This function is not specific to recentf mode but is needed by
;; `recentf-minibuffer-dialog'.  I've also made enough use of it in
;; other contexts that I'm surprised it's not part of Emacs, and the
;; fact that it isn't makes me wonder if there's a preferred way of
;; doing what I use this function for.
(defun recentf-memindex (mem l)
  "Return the index of MEM in list L."
  (let ((mempos -1) ret)
    (while (eq ret nil)
      (setq mempos (1+ mempos))
      (when (equal (car l) mem) (setq ret mempos))
      (setq l (cdr l)))
    ret))

(defun recentf-minibuffer-dialog (arg)
  "Open the recentf menu via the minubuffer, with completion.
With positive prefix ARG, show the ARG most recent items.
Otherwise, show the default maximum number of recent items."
  (interactive "P")
  (let* ((num (prog1 (if (and (not (null arg))
			      (> arg 0))
			 (min arg (length recentf-list))
		       recentf-max-menu-items)
		(and (not (null arg))
		     (> arg (length recentf-list))
		     (message "There are only %d recent items."
			      (length recentf-list))
		     (sit-for 2))))
	 (menu (if (recentf-list-submenus num)
		   (completing-read "Open recent: "
				    (recentf-list-submenus num))))
	 (i (recentf-memindex menu (recentf-list-submenus num)))
	 (items (nth i (recentf-list-entries 'car num)))
	 (files (nth i (recentf-list-entries 'cdr num)))
	 (item (completing-read "Open recent: " items))
	 (j (recentf-memindex item items))
	 (file (nth j files)))
    (funcall recentf-menu-action file))) ; find-file by default
#+end_src
** Lang
*** lsp & lsp-ui

#+begin_src emacs-lisp
  (straight-use-package 'lsp-mode)
  (setq lsp-enable-dap-auto-configure nil)

  (global-set-key (kbd "C-c l") 'lsp-command-map)

  (require 'lsp)

  (autoload 'lsp "lsp-mode" nil t)

  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

  (advice-add 'lsp :before 'direnv-update-environment)
#+end_src
**** lsp ui
#+begin_src emacs-lisp
;; plist only work in mac
;; (setq lsp-use-plists t)
(setq lsp-enable-snippet t)
(setq lsp-enable-dap-auto-configure t)
(setq lsp-enable-relative-indentation t)
(setq lsp-semantic-tokens-enable t)

(straight-use-package 'lsp-ui)

(autoload 'lsp "lsp-ui" nil t)
(require 'lsp-ui)

;; (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
;; (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

(setq lsp-ui-doc-include-signature t)
(setq lsp-ui-doc-use-webkit t)

(advice-add 'lsp :before 'direnv-update-environment)
#+end_src

*** dap
#+begin_src emacs-lisp
  (straight-use-package 'dap-mode)

  (require 'dap-mode)

  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  (require 'dap-cpptools)

  (setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src

*** window
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.23)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*compilation*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.23)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*vterm*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.23)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Async Shell Command*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.23)))

  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Occur*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.33)))

  (add-hook 'occur-hook
            '(lambda ()
               (switch-to-buffer-other-window "*Occur*")))


#+end_src

*** apl
#+begin_src emacs-lisp
(straight-use-package 'gnu-apl-mode)

(defun em-gnu-apl-init ()
  (setq buffer-face-mode-face 'gnu-apl-default)
  (buffer-face-mode))

(add-hook 'gnu-apl-interactive-mode-hook 'em-gnu-apl-init)
(add-hook 'gnu-apl-mode-hook 'em-gnu-apl-init)
#+end_src
*** bash
#+begin_src emacs-lisp
(add-hook 'sh-mode-hook 'lsp-deferred)
#+end_src
*** javascript
#+begin_src emacs-lisp
(with-eval-after-load 'js
  (define-key js-mode-map (kbd "M-.") nil)
)

(add-hook 'js-mode-hook #'lsp-deferred)
#+end_src
*** Clojure
#+begin_src emacs-lisp
(straight-use-package 'clojure-mode)
(straight-use-package 'cider)
(with-eval-after-load 'dap-mode
  (require 'dap-chrome))
#+end_src
*** C++/C
#+begin_src emacs-lisp
(add-hook 'c++-mode-hook #'lsp-deferred)
(add-hook 'c++-mode-hook (lambda () (c-toggle-hungry-state) (c-toggle-auto-newline)))
#+end_src
*** Cmake
#+begin_src emacs-lisp
(straight-use-package 'cmake-mode)

(add-hook 'cmake-mode-hook 'lsp-deferred)
#+end_src
*** typescript
#+begin_src emacs-lisp
(straight-use-package 'tide)

(add-hook 'typescript-mode-hook 'lsp-deferred)
#+end_src
*** go
#+begin_src emacs-lisp
(straight-use-package 'go-mode)

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  ;(add-hook 'before-save-hook #'lsp-organize-imports t t)
  )
;; (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(add-hook 'before-save-hook #'lsp-format-buffer t t)


(add-hook 'go-mode-hook 'lsp-deferred)
(add-hook 'go-mode-hook #'yas-minor-mode)
#+end_src
*** Haskell
#+begin_src emacs-lisp
(straight-use-package 'haskell-mode)

(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

;; Hooks so haskell and literate haskell major modes trigger LSP setup
(straight-use-package 'eglot)
(straight-use-package 'lsp-haskell)
(require 'lsp-haskell)

(add-hook 'haskell-mode-hook #'eglot-ensure)
(add-hook 'haskell-literate-mode-hook #'eglot-ensure)

#+end_src

*** docker
#+begin_src elisp
(straight-use-package 'dockerfile-mode)

(add-hook 'dockerfile-mode-hook 'lsp-deferred)
#+end_src
*** Plantuml
#+begin_src emacs-lisp
(setq org-plantuml-exec-mode 'plantuml
      )
#+end_src
*** graphviz
#+begin_src emacs-lisp
 (straight-use-package 'graphviz-dot-mode)
#+end_src
*** Nix
#+begin_src emacs-lisp
  (straight-use-package 'nix-mode)
  (straight-use-package 'direnv)
#+end_src

*** Rust
#+begin_src emacs-lisp
(straight-use-package 'rust-mode)
(add-hook 'rust-mode-hook 'lsp-deferred)
#+end_src

*** Scheme
#+begin_src emacs-lisp
(straight-use-package 'racket-mode)
#+end_src

*** Solidity
#+begin_src emacs-lisp
(straight-use-package 'solidity-mode)
;; (straight-use-package 'company-solidity)
;; (straight-use-package 'solidity-flycheck)

;; (setq solidity-flycheck-solc-checker-active t)
;; (setq solidity-flycheck-solium-checker-active t)
;; (setq flycheck-solidity-solc-addstd-contracts t)
;; (setq solidity-flycheck-use-project t)

;; (require 'solidity-flycheck)

;; (add-hook 'solidity-mode-hook
;; 	  (lambda ()
;; 	    (set (make-local-variable 'company-backends)
;; 		 (append '((company-solidity company-capf company-dabbrev-code))
;; 			 company-backends))))

(add-to-list 'load-path (expand-file-name "~/.config/emacs/custom"))

;(require 'lsp-solidity)

(eval-after-load 'solidity
  (add-to-list 'lsp-language-id-configuration '(solidity-mode . "solidity")))
#+end_src
*** python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'lsp)
;; (add-hook 'python-mode-hook (lambda () (whitespace-mode +1)))
#+end_src
*** SML
#+begin_src emacs-lisp
;; (straight-use-package 'sml-mode)

;; (autoload 'sml-mode  "sml-mode" "Major mode for editing SML." t)

;; (setq auto-mode-alist
;;       (cons '("\.sml$" . sml-mode)
;;             (cons '("\.sig$" . sml-mode)
;;                   auto-mode-alist)))
#+end_src
*** Scala
#+begin_src emacs-lisp
(straight-use-package 'scala-mode)
(straight-use-package 'sbt-mode)
(straight-use-package 'lsp-metals)

(with-eval-after-load 'scala-mode
  (require 'lsp-metals)
  (add-hook 'scala-mode-hook 'lsp))

#+end_src
*** Java
#+begin_src emacs-lisp
(straight-use-package 'lsp-java)

(require 'lsp-java)

(add-hook 'java-mode-hook #'lsp)

(add-hook 'jave-mode-hook (lambda () (c-toggle-hungry-state) (c-toggle-auto-newline)))

(setq lsp-java-content-provider-preferred "fernflower")
;; 
(setq lsp-java-java-path "/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home/bin/java")

(setq lsp-java-configuration-runtimes '[
                                        (:name "JavaSE-1.8"
					       :path "/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home"
                                               )
                                        (:name "JavaSE-18"
					       :path "/Library/Java/JavaVirtualMachines/openjdk.jdk/Contents/Home"
                                         :default t 
                                               )
                                        ])
(advice-add 'lsp :before (lambda (&rest _args) (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht)))))

(setq lsp-java-imports-gradle-wrapper-checksums [(:sha256 "66406bdca09802f8d7e09a344a8474bbb19abd7f7ac1a4d6682910520a11d08d" :allowed t)])

(setq lsp-java-import-gradle-java-home "/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home")

(require 'lsp-java-boot)

;; to enable the lenses
(add-hook 'lsp-mode-hook #'lsp-lens-mode)
(add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)

;; (setq 
;;  lsp-java-trace-server t)
;; (setq
;;  lsp-java-progress-report t)

#+end_src
*** SQL
#+begin_src emacs-lisp
(add-hook 'sql-mode-hook 'lsp)

#+end_src
*** yaml
#+begin_src emacs-lisp
(straight-use-package 'yaml-mode)

;; (setq lsp-yaml-schemas '(:kubernetes "/*-k8s.yaml"))

(add-hook 'yaml-mode-hook #'lsp)
#+end_src
*** restapi
#+begin_src emacs-lisp
(straight-use-package 'restclient)
(require 'restclient)

(straight-use-package 'company-restclient)

(require 'company-restclient)

(add-to-list 'company-backends 'company-restclient)

(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
#+end_src
*** web
#+begin_src emacs-lisp

;; (straight-use-package 'web-mode)

;; (require 'web-mode)

;; (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(straight-use-package 'emmet-mode)

(require 'emmet-mode)
(setq sgml-basic-offset 4)

(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.

(add-hook 'html-mode-hook #'lsp)

(add-hook 'css-mode-hook #'lsp)


;; (add-hook 'html-mode 'lsp)
#+end_src
** Error check
*** flycheck
Bind to lsp mode
#+begin_src emacs-lisp
(add-hook 'lsp-mode-hook #'flycheck-mode)

#+end_src
*** flyspell
#+begin_src emacs-lisp
  (defun flyspell-on-for-buffer-type ()
      "Enable Flyspell appropriately for the major mode of the current buffer.  Uses `flyspell-prog-mode' for modes derived from `prog-mode', so only strings and comments get checked.  All other buffers get `flyspell-mode' to check all text.  If flyspell is already enabled, does nothing."
      (interactive)
      (if (not (symbol-value flyspell-mode)) ; if not already on
	(progn
	  (if (derived-mode-p 'prog-mode)
	    (progn
	      (message "Flyspell on (code)")
	      (flyspell-prog-mode))
	    ;; else
	    (progn
	      (message "Flyspell on (text)")
	      (flyspell-mode 1)))
	  ;; I tried putting (flyspell-buffer) here but it didn't seem to work
	  )))
    
    (defun flyspell-toggle ()
      "Turn Flyspell on if it is off, or off if it is on.  When turning on, it uses `flyspell-on-for-buffer-type' so code-vs-text is handled appropriately."
      (interactive)
      (if (symbol-value flyspell-mode)
	  (progn ; flyspell is on, turn it off
	    (message "Flyspell off")
	    (flyspell-mode -1))
	  ; else - flyspell is off, turn it on
	  (flyspell-on-for-buffer-type)))

    (add-hook 'find-file-hook 'flyspell-on-for-buffer-type)
    ;; (add-hook 'after-change-major-mode-hook 'flyspell-on-for-buffer-type)


#+end_src
** Safe Variable
#+begin_src emacs-lisp
(add-to-list 'safe-local-variable-values
             '(LaTeX-command . "lualatex -shell-escape"))

(add-to-list 'safe-local-variable-values
             '(company-clang-arguments . "-I src"))

(add-to-list 'safe-local-variable-values             '(compile-command . "cmake --build build"))

(add-to-list 'safe-local-variable-values '(lsp-rust-analyzer-proc-macro-enable . t))

(add-to-list 'safe-local-variable-values '(lsp-rust-analyzer-experimental-proc-attr-macros . t))

(add-to-list 'safe-local-variable-values '(eval add-hook 'after-save-hook
                                                (lambda nil
                                                  (org-babel-tangle))

                                                nil t))
#+end_src

** Org
*** Org contrib
*** Org attach
#+begin_src emacs-lisp
(require 'org-contrib)

(setq org-attach-id-dir "~/Dropbox/Org/.attach")
(setq org-startup-with-inline-images t)

(with-eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
#+end_src
*** Org download
#+begin_src emacs-lisp
(straight-use-package 'org-download)

;;(require 'org-download)

(setq org-download-image-dir "~/Pictures")
(setq org-download-method 'attach)

#+end_src
*** Org Reveal
#+begin_src emacs-lisp
;(straight-use-package 'org-re-reveal)

(require 'org-re-reveal)
#+end_src
*** Org Roam
#+begin_src emacs-lisp
;(straight-use-package 'org-roam)

(setq org-roam-directory (expand-file-name "~/Dropbox/Notes")
      org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
         :unnarrowed t
         :immediate-finish t)))

(defvar org-roam-keymap
  (let ((keymap (make-keymap)))
    (define-key keymap "l" 'org-roam-buffer-toggle)
    (define-key keymap "f" 'org-roam-node-find)
    (define-key keymap "g" 'org-roam-graph)
    (define-key keymap "i" 'org-roam-node-insert)
    (define-key keymap "c" 'org-roam-capture)
    (define-key keymap "s" 'org-roam-db-sync)
    keymap))

(defalias 'org-roam-keymap org-roam-keymap)

(global-set-key (kbd "C-c n") 'org-roam-keymap)

(with-eval-after-load "org-roam"
  (org-roam-setup)
  (setq +org-roam-open-buffer-on-find-file nil))

(defun meomacs--org-prettify-symbols ()
  (setq-local prettify-symbols-alist
              '(("#+begin_src" . "¬ª")
                ("#+end_src" . "¬´")
                ("#+begin_example" . "‚ùØ")
                ("#+end_example" . "‚ùÆ")
                ("#+begin_quote" . "‚Äü")
                ("#+end_quote" . "‚Äü")
                ("[X]" . "‚òë")
                ("[ ]" . "‚òê"))))

(add-hook 'org-mode-hook 'meomacs--org-prettify-symbols)

(setq org-hide-emphasis-markers t)
(setq org-hide-leading-stars t)

(setq org-confirm-babel-evaluate nil)

(straight-use-package 'ob-mermaid)

(require 'ob-mermaid)

(with-eval-after-load "ox-latex"
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (add-to-list 'org-latex-packages-alist '("" "geometry"))
  )

(straight-use-package 'ob-restclient)

(require 'ob-restclient)

(straight-use-package 'ox-gfm)
(require 'ox-gfm)

(straight-use-package
 '(org-cv :type git :host github :repo "Titan-C/org-cv"))

(require 'ox-moderncv nil t)

(defun resume-export ()
  "Export the resume with moderncv latex module to pdf"
  (interactive)
  (let ((name (file-name-sans-extension (buffer-name))))
    (progn
      (org-export-to-file 'moderncv (concat name ".tex"))
      (org-latex-compile (concat name ".tex")))))

;; (defun resume-hugo-export ()
;;   "Export the resume with moderncv to hugo md"
;;   (interactive)
;;   (let ((name (file-name-sans-extension (buffer-name)))
;;         (org-export-exclude-tags '("noexport" "latexonly")))
;;       (org-export-to-file 'hugocv (concat name ".md")))
;;   )

(setq org-export-backends '(ascii html icalendar latex man md odt))

(with-eval-after-load "org"
  (require 'org)
  (require 'ob)
  (require 'sql)
  (require 'ob-sql)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t)
     (C . t)
     (js . t)
     (mermaid . t)
     (emacs-lisp . t)
     (plantuml . t)
     (python . t)
     (shell . t)
     (gnuplot . t)
     (sql . t)
     (restclient . t)
     (haskell . t)))

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp :namespaces std :flags  -std=c++20 :includes <iostream> <vector>"))
  (add-to-list 'org-structure-template-alist '("cl" . "src C :includes <stdlib.h> <stdio.h>"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("go" . "src go"))
  (add-to-list 'org-structure-template-alist '("rust" . "src rust"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
  (add-to-list 'org-structure-template-alist '("json" . "src json"))
  (add-to-list 'org-emphasis-alist '("=" (:box (:line-width -2 :color "gray50" :style released-button) :inherit org-verbatim))))

(setq org-directory "~/Dropbox/Org"
      org-agenda-files
      (list org-directory)
      org-agenda-diary-file
      (concat org-directory "/todo.org")
      org-default-notes-file
      (concat org-directory "/notes.org"))

(setq org-src-preserve-indentation t
      org-src-fontify-natively t
      org-return-follows-link t)
;; (with-eval-after-load ox-latex)
#+end_src
*** Org Hugo
#+begin_src emacs-lisp
(straight-use-package 'ox-hugo)

(require 'ox-hugo)


#+end_src
** Key bindings
*** open app
#+begin_src emacs-lisp
(defalias 'straight-keymap straight-keymap)
(global-set-key (kbd "C-x p") 'straight-keymap)

(define-key global-map (kbd "C-c p") project-prefix-map)

(with-eval-after-load "sql"
  (define-key sql-mode-map (kbd "C-c C-c")
              (lambda () (interactive) (if (bound-and-true-p lsp-mode)
                                      (lsp-sql-execute-paragraph)
                                    (sql-send-paragraph)))))

(with-eval-after-load "project"
  (define-key project-prefix-map "s" 'vterm)
  (define-key project-prefix-map "m" 'magit))

(setq project-switch-commands 'project-find-file)

(defvar toggle-map (make-keymap))
(defalias 'toggle-map toggle-map)

(defvar addon-map (make-keymap))
(defalias 'addon-map addon-map)

(define-key mode-specific-map "t" toggle-map)
(define-key mode-specific-map "a" addon-map)

(meow-leader-define-key
 '("i" . imenu)
 '("<SPC>" . switch-to-buffer)
 '("\\" . split-window-right)
 '("-" . split-window-below)
 '("s" . mode-line-other-buffer)
 '("w" . ace-window)
 '("r" . recentf-minibuffer-dialog)
 '("q" . treemacs-select-window)
 '("f" . project-find-file)
 '("b" . toggle-hiding)
 '("z" . toggle-selective-display)
 '("d" . dap-hydra)
 ;; '("h" . window-left)
 ;; '("l" . window-right)
 ; '("*" . rg)
 
 '(":" . replace-regexp))


(require 'treemacs-project-follow-mode)
(treemacs-project-follow-mode t)
(require 'treemacs-tag-follow-mode)
(treemacs-tag-follow-mode t)
(setq treemacs-tag-follow-delay 0.2)
; one beautiful work around to make c+[ works
(define-key meow-insert-state-keymap 
            (kbd "C-g") [escape]
            )
#+end_src
*** Ace
#+begin_src emacs-lisp
(straight-use-package 'ace-link)

(require 'ace-link)

(ace-link-setup-default)
#+end_src
** Leetcode
#+begin_src emacs-lisp
(straight-use-package 'leetcode)
(autoload 'leetcode "leetcode" nil t)

(setq leetcode-prefer-language "cpp"
      leetcode-prefer-sql "mysql"
      )
#+end_src
** Pdf
#+begin_src emacs-lisp
(require 'pdf-tools)
#+end_src

* Conclusion
** Tangle on save
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:

