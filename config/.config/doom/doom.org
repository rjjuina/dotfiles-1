:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args :emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Doom Emacs configuration
#+author: Xiong ChenYu
#+email: xiongchenyu6@gmail.com

* Doom config file overview

Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but theses are the main ones. The load order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

** Config file headers

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.


#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
;; Copy me to ~/.doom.d/init.el or ~/.config/doom/init.el, then edit me!
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>

** Customized variables

Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configure][does not recommend the Emacs =customize= mechanism]]:

#+begin_quote
/Note: do not use M-x customize or the customize API in general. Doom is designed to be configured programmatically from your config.el, which can conflict with Customize’s way of modifying variables./
#+end_quote

All necessary settings are therefore set by hand as part of this configuration file. The only exceptions are "safe variable" and "safe theme" settings, which are automatically saved by Emacs in =custom.el=, but this is OK as they don't conflict with anything else from the config.

* Doom modules
This code is written to the =init.el= to select which modules to load. Written here as-is for now, as it is quite well structured and clear.
#+begin_src emacs-lisp :tangle init.el
(setq doom-localleader-key ",")

(doom! :feature

       :completion
       (company                         ; the ultimate code completion backend
        +childframe
        ) ; as-you-type code completion                    ; a nicer company UI (Emacs 26+ only)
       ;; helm            ; the *other* search engine for love and life
       ;; ido            ; the other *other* search engine...
       ;;(ivy
       ;; +childframe
       ;; +icons +prescient)
       (vertico +icons)

       :ui
       doom
       deft                             ; notational velocity for Emacs
       doom-dashboard
       doom-quit                 ; DOOM quit-message prompts when you quit Emacs
       fill-column               ; a `fill-column' indicator
       hl-todo                   ; highlight TODO/FIXME/NOTE tags
       modeline                  ; snazzy, Atom-inspired modeline, plus API
       indent-guides
       nav-flash   ; blink the current line after jumping
       ophints     ; highlight the region an operation acts on
       ;;neotree           ; a project drawer, like NERDTree for vim
       treemacs
       (emoji +ascii +unicode +github) ; a project drawer, like neotree but cooler
       (popup                     ; tame sudden yet inevitable temporary windows
        +all                      ; catch all popups that start with an asterix
        +defaults)
       (ligatures +extra)
                                        ; FIXME an (incomplete) tab bar for Emacs
                                        ; unicode           ; extended unicode support for various languages
       vc-gutter                        ; vcs diff in the fringe
       vi-tilde-fringe                  ; fringe tildes to mark beyond EOB
       workspaces             ; tab emulation, persistence & separate workspaces
       tabs
       window-select      ; visually switch windows
       zen

       :editor
       evil                         ; come to the dark side, we have cookies
       file-templates               ; auto-snippets for empty files
       fold                         ; (nigh) universal code folding
       (format +onsave)             ; automated prettiness
       lispy                        ; vim for lisp, for people who dont like vim
       multiple-cursors                 ; editing in many places at once
       snippets                         ; my elves. They type so I don't have to
       rotate-text               ; cycle region at point between text candidates
       word-wrap

       :emacs
       (dired                         ; making dired pretty [functional]
        +ranger                       ; bringing the goodness of ranger to dired
        +icons                        ; colorful icons for dired-mode
        )
       electric                         ; smarter, keyword-based electric-indent
       (ibuffer +icons)
       vc                         ; version-control and Emacs, sitting in a tree
       :os
       (:if IS-MAC macos)    ; improve compatibility with macOS
       :term                          ; terminals in Emacs
       ;;(term)
                                        ; a consistent, cross-platform shell (WIP)
       :checkers
       syntax                        ; tasing you for every semicolon you forget
       (spell +flyspell)             ; tasing you for misspelling mispelling
       grammar                       ; tasing grammar mistake every you make
       :input
       chinese

       :tools
       ansible
       (docker +lsp)
       (debugger +lsp)       ; FIXME stepping through code, to help you add bugs
       direnv
       editorconfig             ; let someone else argue about tabs vs spaces
       (eval +overlay)          ; run code, run (also, repls)
       (lookup                  ; helps you navigate your code and documentation
        +xwidget
        +dictionary
        +offline
        +docsets)
       ;;ein               ; tame Jupyter notebooks with emacs
       gist                             ; interacting with github gists
       (lsp +peek)
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload                         ; map local to remote projects via ssh/ftp

       :lang
       ;; agda
       (cc +lsp)                        ; C/C++/Obj-C madness
       (clojure +lsp) ;;  ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq    ; proofs-as-programs
       ;;crystal          ; ruby at the speed of c
       data   ; config/data formats
       ;;erlang            ; an elegant language for a more civilized age
       ;;elixir            ; erlang done right
       emacs-lisp                  ; drown in parentheses
       ;;ess               ; emacs speaks statistics
       (go +lsp)                        ; the hipster dialect
       (haskell +lsp)                   ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       (java +lsp) ; the poster child for carpal tunnel syndrome
       json
       (javascript +lsp) ;; +lsp

                                        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;latex          ; writing papers in Emacs has never been so fun
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       (markdown +grip)    ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix                              ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org                             ; organize your plain life in plain text
        +dragndrop
        +gnuplot
        ;; +pandoc
        +pomodoro
        +gnuplot
        +hugo
        +roam2
        +pretty
        +present)          ; Emacs for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       plantuml                 ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python +lsp +peotry +pyright)             ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       rest                 ; Emacs as a REST client
       (rust +lsp)          ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       (scala +lsp)         ; java, but good
       (sh +lsp)            ; she sells (ba|z|fi)sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       (web +html +css)                 ; the tubes
       ;;vala              ; GObjective-C
       (yaml +lsp)

       ;; Applications are complex and opinionated modules that transform Emacs
       ;; toward a specific purpose. They may have additional dependencies and
       ;; should be loaded late.
       :email
       (mu4e +gmail +org)                    ; emacs as an email client
       :app
       calendar
       irc                              ; how neckbeards socialize
       (rss +org)                       ; emacs as an RSS reader
       twitter           ; twitter client https://twitter.com/vnought

                                        ; a proofreader (grammar/style check) for Emacs

       :collab
       ;;floobits          ; peer programming for a price
       ;;impatient-mode    ; show off code over HTTP

       :config
       ;; For literate config users. This will tangle+compile a config.org
       ;; literate config in your `doom-private-dir' whenever it changes.
       ;;literate

       ;; The default module sets reasonable defaults for Emacs. It also
       ;; provides a Spacemacs-inspired keybinding scheme and a smartparens
       ;; config. Use it as a reference for your own modules.
       (default +bindings +smartparens)
       :private
       my-leet-code
       )
#+end_src
* General configuration
My profile setup:
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "XiongChenYu"
      user-mail-address "xiongchenyu6@gmail.com")

(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil)
#+end_src
** Emacs & Doom emacs ui setup:
#+begin_src emacs-lisp :tangle config.el
(setq
      doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-unicode-font (font-spec :family "DejaVu Sans" :size 14)
      doom-modeline-github t
      doom-modeline-major-mode-color-icon t
      doom-modeline-enable-word-count t
      ;; doom-modeline-minor-modes t
      doom-modeline-indent-info t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)                      ; Disable tooltips
(menu-bar-mode -1)

;; Set up the visible bell
(setq visible-bell t)
(setq indent-guide-global-mode t)

(global-auto-revert-mode)
;; (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0.11.jar")

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(setq display-line-numbers-type 'relative)

(setq url-debug t)

(setq-default fill-column 120)

(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)

;; (add-hook 'emacs-startup-hook (lambda () (normal-erase-is-backspace-mode +1)))

(if (not (display-graphic-p)) (setq normal-erase-is-backspace t))
;;
(setq mouse-avoidance-mode 'banish)

(+global-word-wrap-mode)
#+end_src
*** GUI Window adjustment
Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp :tangle config.el
(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

I don't like confirmations or any other type of prompt
#+begin_src emacs-lisp :tangle config.el

(setq compilation-read-command nil)
(setq confirm-kill-emacs nil)
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;;; Examples:
;; (package! another-package :recipe (:fetcher github :repo "username/repo"))
;; (package! builtin-package :disable t)
;; (package! ox-confluence-en :recipe (:host github :repo "correl/ox-confluence-en"))
(package! systemd)
(package! j-mode)
#+end_src
** encrypt
#+begin_src emacs-lisp
(setq epg-gpg-program "gpg")

#+end_src

* Vim
Try transfer more usage experience from vim
** Vim equivalent Escape
#+begin_src emacs-lisp :tangle config.el
;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
(global-set-key (kbd "C-[") 'keyboard-escape-quit)
#+end_src
** Vim like window movement
Use *Ctrl* + vim motion key
#+begin_src emacs-lisp :tangle config.el
;; (map!
;;  ;; Easier window movement
;;  :n "C-h" 'evil-window-left
;;  :n "C-j" 'evil-window-down
;;  :n "C-k" 'evil-window-up
;;  :n "C-l" 'evil-window-right
;;  :n "C-q" 'delete-window

;;  (:map evil-treemacs-state-map
;;   "C-l" 'evil-window-right)
;;  )
#+end_src
** tabline.vim
Tab motion keys
#+begin_src emacs-lisp :tangle config.el
(setq centaur-tabs-set-icons t)
(define-key evil-normal-state-map (kbd "g t")
  'centaur-tabs-forward)
(define-key evil-normal-state-map (kbd "g T")
  'centaur-tabs-backward)
#+end_src
** Number in place increase
Used to use this key binding to increase number in vim a lot.
#+begin_src emacs-lisp :tangle config.el
;; , ', ,@ must be used inside `() directly otherwise you should use apply func
(defmacro set-evil-number-keymap (key-set func &rest modes)
    `(progn
       ,@(-map
          (lambda (mode)
            `(define-key ,(intern (concat "evil-" mode "-state-map")) (kbd ,key-set)
               ',(intern (concat "evil-numbers/" func)))) `(,@modes))))

(eval
 (macroexpand
  '(set-evil-number-keymap "C-a" "inc-at-pt" "normal" "insert")))
;; (eval
;;  (macroexpand
;;   '(set-evil-number-keymap "C-x" "dec-at-pt" "normal" "insert")))
#+end_src

* Mail
I use mu4e to view emails and use org mode to compose email

Firstly set up send email through gmail smtp server through build in smtp server, and use authinfo auth method
#+begin_src emacs-lisp :tangle config.el
(setq message-send-mail-function 'smtpmail-send-it
  smtpmail-stream-type 'starttls
  smtpmail-default-smtp-server "smtp.gmail.com"
  smtpmail-smtp-server "smtp.gmail.com"
  smtpmail-smtp-service 587)

(setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
      org-msg-startup "hidestars indent inlineimages"
      org-msg-greeting-fmt "\nHi%s,\n"
      org-msg-convert-citation t
      org-msg-signature "
Regards,

,#+begin_signature
,*Xiong ChenYu*
/One Emacs to rule them all/
,#+end_signature")
#+end_src

Then setup use external software mbsync (*isync* on /Mac/) to download the mail
#+begin_src emacs-lisp :tangle config.el
(setq mu4e-attachment-dir "~/Downloads/"
      mu4e-get-mail-command "mbsync -a -q"
      mu4e-update-interval 100
      mu4e-view-show-images t
      mu4e-view-prefer-html t
      message-kill-buffer-on-exit t
      mu4e-headers-auto-update t)

#+end_src

Need some optimization for Gmail because gmail uses labels as folders we can use lazy check since messages don't really "move"
#+begin_src emacs-lisp :tangle config.el
(setq +mu4e-gmail-accounts '("xiongchenyu6@gmail.com" . "/xiongchenyu6"))
;; don't need to run cleanup after indexing for gmail
(setq mu4e-index-cleanup nil
      mu4e-index-lazy-check t)
#+end_src
* IRC
#+begin_src emacs-lisp :tangle config.el
(defun my-fetch-password (&rest params)
  (require 'auth-source)
  (let ((match (car (apply #'auth-source-search params))))
    (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
              (funcall secret)
            secret))
      (error "Password not found for %S" params))))

(defun my-nickserv-password (server)
  (my-fetch-password :user "freemanX" :host "irc.libera.chat")
  )

(set-irc-server! "irc.libera.chat"
  '(:tls t
    :port 6697
    :nick "freemanX"
    :sasl-username "freemanX"
    :sasl-password my-nickserv-password
    :channels ("#emacs")))
#+end_src

* Coding
** Code complete
If you want to replace it with yasnippet's default snippets uncomment the code and use ~:ignore~ keyword to comment out doom snippets
#+begin_src emacs-lisp :tangle packages.el
(package! doom-snippets) ;;:ignore t)
;; (package! yasnippet-snippets)
;(package! company-tabnine)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(define-key evil-insert-state-map (kbd "C-n") 'company-select-next-or-abort)
(define-key evil-insert-state-map (kbd "C-p") 'company-select-previous-or-abort)

(after!
  company
  (setq company-minimum-prefix-length
        2
        company-tooltip-limit
        20
        company-transformers '(company-sort-by-backend-importance)
        )
  (define-key! company-active-map
    "TAB" nil
    [tab] nil))


(after! yasnippet
  (add-to-list 'yas-snippet-dirs (expand-file-name "~/.snippets"))
  (yas-reload-all)
  )

(after! auto-yasnippet
  (setq aya-persist-snippets-dir "~/.snippets")
  )
;; (use-package! company-tabnine
;;   :after company
;;   :config
;;   (set-company-backend! '(sql-mode conf-mode) '(company-yasnippet :with company-capf :with company-tabnine))
;;   )
#+end_src
** Language server
#+begin_src emacs-lisp :tangle config.el
(setq lsp-file-watch-threshold nil)
(setq lsp-auto-guess-root t)

(setq lsp-ui-doc-use-webkit t)
(setq lsp-ui-doc-max-height 99)
(setq lsp-ui-doc-max-width 9999)

(setq-default lsp-semantic-tokens-enable t)
(setq-default lsp-semantic-tokens-mode t)
#+end_src

** Debugger
#+begin_src emacs-lisp :tangle config.el
(setq
 gdb-many-windows t
 gdb-show-main t)
#+end_src
** Git
Set magit directory to $HOME/workspace and set max search depth to 2
#+begin_src emacs-lisp :tangle config.el
(setq magit-repository-directories '(("~/workspace" . 2)))
#+end_src
* Programming Language
** Cpp

#+begin_src emacs-lisp :tangle packages.el
(package! ccls :disable t)
(package! semantic-refactor)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(after! lsp-clients
  (set-lsp-priority! 'clangd 1))

(after! cc-mode
  (setq semantic-mode 1)
  (map!
   :map (c-mode-map c++-mode-map)
   (:localleader
    :n "r" #'srefactor-refactor-at-point
    ))
  )

(after! projectile
  (projectile-register-project-type 'cmake '("CMakeLists.txt")
                                    :project-file "CMakeLists.txt"
                                    :configure #'projectile--cmake-configure-command
                                    :compile #'projectile--cmake-compile-command
                                    :test #'projectile--cmake-test-command
                                    :run "./build/main"
                                    :install "cmake --build build --target install"
                                    :package "cmake --build build --target package"))
#+end_src
** Clojure
#+begin_src emacs-lisp :tangle config.el
(add-to-list '+debugger--dap-alist '((:lang clojure +lsp) :after clojure-mode :require dap-chrome))
#+end_src
** Cmake
#+begin_src emacs-lisp :tangle config.el
(add-hook! 'cmake-mode-hook #'lsp-deferred)
#+end_src
** Haskell
#+begin_src emacs-lisp :tangle config.el
(setq haskell-process-type 'cabal-new-repl)
(after! haskell-mode
  (map!
   :map haskell-mode-map
   ;; this is set to use cabal for dante users and stack for intero users:
   (:localleader
    (:prefix ("r" . "repl")
     :n "l" #'haskell-process-load-or-reload
     :n "d" #'haskell-process-reload-devel-main )
    )))
#+end_src
** lisp
#+begin_src emacs-lisp :tangle config.el
(set-lookup-handlers! 'emacs-lisp-mode :documentation #'helpful-at-point)

(set-lookup-handlers! 'emacs-library-link :documentation )

(after! lispy
  (setq lispy-outline "^;; \\(?:;[^#]\\|\\*+\\)"
        lispy-outline-header ";; "
        lispy-ignore-whitespace t)
  (map! :map lispy-mode-map
        :i "M-)" #'lispy-parens-auto-wrap
        :i "M-}" #'lispy-braces-auto-wrap
        :i "M-]" #'lispy-brackets-auto-wrap
        :i "_" #'special-lispy-different
        :i [remap delete-backward-char] #'lispy-delete-backward)
  )

(after! evil-mc
  (add-to-list 'evil-mc-incompatible-minor-modes 'lispy-mode))

#+end_src
** Org
#+begin_src emacs-lisp :tangle packages.el
(package! ox-gfm)
(package! ob-mermaid)
(package! mermaid-mode)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq org-log-done "time"
      org-log-done-with-time 't)
(setq org-catch-invisible-edits 'show-and-error)
(setq org-cycle-separator-lines 0)


(setq org-hugo-auto-set-lastmod 't
org-hugo-section "posts"
org-hugo-suppress-lastmod-period 43200.0
org-hugo-export-creator-string "Emacs 28.05 (Org mode 9.4 + ox-hugo + XiongChenYu)"
)
(setq rmh-elfeed-org-files '("~/Dropbox/Org/fun/elfeed.org"))

(setq deft-directory "~/Dropbox/Org")

(setq org-directory "~/Dropbox/Org"
      org-agenda-files
      (list org-directory)
      org-agenda-diary-file
      (concat org-directory "/todo.org")
      org-default-notes-file
      (concat org-directory "/notes.org"))

(setq org-src-preserve-indentation t
      org-return-follows-link t)

(map!
 :map (org-mode-map)
 :i "<S-return>" #'org-insert-subheading)

(advice-remove #'org-export-output-file-name #'+org*export-output-file-name)

(require 'org)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-src-fontify-natively t)

(setq org-latex-compiler "pdflatex --shell-escape %f")
(setq org-html-htmlize-output-type 'css)
(eval-after-load "org"
  '(require 'ox-gfm nil t))

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src


Use roam to manage the notes and journal
#+begin_src emacs-lisp :tangle config.el

(setq org-roam-directory "~/Dropbox/Notes/"
      org-roam-capture-templates
      '(("d" "default" plain "%?"
          :target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
          :unnarrowed t
          :immediate-finish t)))
#+end_src
[[id:5ebde5d6-d732-481f-b625-0e83a396319e][Haskell]]
*** literate programming
Tangle-on-save has revolutionized my literate programming workflow. It automatically runs =org-babel-tangle= upon saving any org-mode buffer, which means the resulting files will be automatically kept up to date. For a while I did this by manually adding =org-babel-tangle= to the =after-save= hook in Org mode, but now I use the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package, which does this asynchronously and selectively for each Org file where it is desired.

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package! org-auto-tangle
 ; :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src
** Protobuf
#+begin_src emacs-lisp :tangle packages.el
(package! protobuf-mode)
#+end_src
** Python
#+begin_src emacs-lisp :tangle config.el
(setq lsp-pyls-plugins-autopep8-enabled nil)
(setq lsp-pyls-plugins-yapf-enabled t)
#+end_src
- Plantuml
#+begin_src emacs-lisp :tangle config.el
(setq plantuml-default-exec-mode 'jar)
#+end_src
** Prometheus
#+begin_src emacs-lisp :tangle config.el
(define-derived-mode prometheus-v2-rules-mode yaml-mode "prometheus rule" ())

(add-to-list 'auto-mode-alist '("\\.rules$" . prometheus-v2-rules-mode))

(require 'flycheck)
(flycheck-define-checker prometheus-v2-promtool-rules
  "A prometheus rules checker using promtool.
  See URL `https://github.com/prometheus/prometheus/tree/master/cmd/promtool'."
  :command ("promtool" "check" "rules" (eval (expand-file-name (buffer-file-name))))
  :standard-input t
  :error-patterns
  ((error (zero-or-more not-newline) "\n"
          (zero-or-more not-newline) "\n"
          (zero-or-more not-newline)
          (zero-or-more "\n")
          " line " line ":" (message)))
  :modes prometheus-v2-rules-mode)

(add-to-list 'flycheck-checkers 'prometheus-v2-promtool-rules)

#+end_src

** Sql
#+begin_src emacs-lisp :tangle config.el
(add-hook! 'sql-mode-hook #'lsp-deferred)
#+end_src
** Yaml
#+begin_src emacs-lisp :tangle config.el
(setq lsp-yaml-schemas '(:kubernetes "/*-k8s.yaml"))
#+end_src
** Web
#+begin_src emacs-lisp :tangle config.el

;; (setq js-indent-level 2)
;; (setq css-indent-offset 2)
#+end_src
* Utils
** remove windows carrage returns
#+begin_src emacs-lisp :tangle config.el
(defun delete-carrage-returns ()
  (interactive)
  (save-excursion
    (goto-char 0)
    (while (search-forward "\r" nil :noerror)
      (replace-match ""))))
#+end_src
* Tools
** Leetcode
#+begin_src emacs-lisp :tangle config.el
(setq leetcode-prefer-language "cpp")
(setq leetcode-prefer-sql "mysql")
#+end_src
** wakatime

#+begin_src emacs-lisp :tangle packages.el
(package! wakatime-mode)
#+end_src
#+begin_src emacs-lisp :tangle config.el
(use-package wakatime-mode)
(global-wakatime-mode)

(add-hook! wakatime-mode
  (setq wakatime-cli-path "wakatime")
)

#+end_src
* keybindings
#+begin_src emacs-lisp :tangle config.el
(map! :leader "h" nil
      :desc "Follow thing"  "RET" 'org-open-at-point
      :desc "xxxxx" "w" #'treemacs-delete-other-windows
      (:when (featurep! :lang org +roam2)
        (:prefix ("m" . "roam")
         :desc "Open random node"           "a" #'org-roam-node-random
         :desc "Find node"                  "f" #'org-roam-node-find
         :desc "Find ref"                   "F" #'org-roam-ref-find
         :desc "Show graph"                 "g" #'org-roam-graph
         :desc "Insert node"                "i" #'org-roam-node-insert
         :desc "Capture to node"            "n" #'org-roam-capture
         :desc "Toggle roam buffer"         "r" #'org-roam-buffer-toggle
         :desc "Launch roam buffer"         "R" #'org-roam-buffer-display-dedicated
         :desc "Sync database"              "s" #'org-roam-db-sync
         (:prefix ("d" . "by date")
          :desc "Goto previous note"        "b" #'org-roam-dailies-goto-previous-note
          :desc "Goto date"                 "d" #'org-roam-dailies-goto-date
          :desc "Capture date"              "D" #'org-roam-dailies-capture-date
          :desc "Goto next note"            "f" #'org-roam-dailies-goto-next-note
          :desc "Goto tomorrow"             "m" #'org-roam-dailies-goto-tomorrow
          :desc "Capture tomorrow"          "M" #'org-roam-dailies-capture-tomorrow
          :desc "Capture today"             "n" #'org-roam-dailies-capture-today
          :desc "Goto today"                "t" #'org-roam-dailies-goto-today
          :desc "Capture today"             "T" #'org-roam-dailies-capture-today
          :desc "Goto yesterday"            "y" #'org-roam-dailies-goto-yesterday
          :desc "Capture yesterday"         "Y" #'org-roam-dailies-capture-yesterday
          :desc "Find directory"            "-" #'org-roam-dailies-find-directory))))
#+end_src
* Input method setup for Linux

I prefer to use customized rime as my input method, here is the configuration

#+begin_src emacs-lisp :tangle packages.el
(package! liberime-config
  :recipe (:host github :repo "merrickluo/liberime"
           :files ("CMakeLists.txt" "Makefile" "src" "liberime.el")))

#+end_src

#+begin_src emacs-lisp :tangle config.el

(if IS-LINUX
    ((let ((liberime-auto-build t))
       (require 'liberime nil t))

     (use-package! liberime)
     (use-package! pyim
       ;; :quelpa (pyim :fetcher github :repo "merrickluo/pyim")
       :init
       (setq pyim-title "R")
       :config
       ;; (use-package pyim-basedict
       ;;   :config
       ;;   (pyim-basedict-enable))
       (define-key evil-insert-state-map (kbd "M-i") 'pyim-convert-string-at-point)
       (setq pyim-dcache-auto-update t)
       (setq default-input-method "pyim")

       (setq pyim-page-length 9)

       ;; 我使用全拼
       (setq pyim-page-tooltip 'child-frame)

       (setq pyim-default-scheme 'rime)
       (liberime-try-select-schema "luna_pinyin_simp")
       ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换 :-)
       ;; 我自己使用的中英文动态切换规则是：
       ;; 1. 光标只有在注释里面时，才可以输入中文。
       ;; 2. 光标前是汉字字符时，才能输入中文。
       ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
       (setq-default pyim-english-input-switch-functions
		     '(pyim-probe-dynamic-english
		       pyim-probe-isearch-mode
		       pyim-probe-program-mode
                       pyim-probe-evil-normal-mode
		       pyim-probe-org-structure-template))

       (setq-default pyim-punctuation-half-width-functions
		     '(pyim-probe-punctuation-line-beginning
		       pyim-probe-punctuation-after-punctuation)))

     ;; (setq org-re-reveal-revealjs-version "4.0")

     (require 'ox-confluence-en)
     (require 'systemd)))
#+end_src
